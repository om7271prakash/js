Javascript: 
    - Syncronous
    - Single Threaded
    - Prototype based
    - Loosely typed language

Everything in Javascript happens insite the Execution context

                    Execution Context
===============================================================
|                           |                                 |
|           Memory          |           Code                  |
|   (Variable Environment)  |     (Thread of Execution)       |
|=============================================================|
|   key: value              |        {Code here}              |
|   func: () => {}          |                                 |
|                           |                                 |
===============================================================

Eg: 
===============================
var n = 2;
function square(num){
    var ans = num * num;
    return ans;
}
var square2 = square(n);
var square4 = square(4);

n = argument
num = parameter

===============================

Execution Context is created in two phases
    - Memory Creation Phase
        n: undefined
        square: { //code }
        square2: undefined
        square4: undefined

    - Code Execution Phase
        n: 2
        - <skip {}>
        - function invokes => square2:

            - Execution Context has created for square2
            
            - Memory Creation Phase
                num: undefined
                ans: undefined
            - Code Execution Phase
                num: 2
                ans: {num * num} => ans: 4
                return => takes the controll of program where function was invoked
                return ans => return 4
                Execution Context: exit();

        - function invokes => square4:

            - Execution Context has created for square4
            
            - Memory Creation Phase
                num: undefined
                ans: undefined
            - Code Execution Phase
                num: 4
                ans: {num * num} => ans: 16
                return => takes the controll of program where function was invoked
                return ans => return 16
                Execution Context: exit();
        square2: 16


Call Stack: Whenever JS code executed, call stack is populated with Execution Context. When function is invoked and it put new Execution Context inside the call stack
|=======================|        |=======================|      |=======================|
|                       |        |                       |      |                       |
|                       |        |                       |      |                       |
|                       |   =>   |                       |  =>  |                       |
|                       |        |                       |      |                       |
|=======================|        |=======================|      |=======================|
|                       |        |         square2       |      |         square4       |
|=======================|        |=======================|      |=======================|
|   Execution Context   |        |   Execution Context   |      |   Execution Context   |
|=======================|        |=======================|      |=======================|


Call Stack is also known as: 
    - Call Stack
    - Execution Context Stack
    - Program Stack
    - Controll Stack
    - Runtime Stack
    - Machine Stack

Hoisting

function(){}                // Behaves like function in Hoisting
var func = () => {}         // Behaves like variable in Hoisting
var func = function(){}     // Behaves like variable in Hoisting

Shortest Javascript Programm is
    - Empty file

Undefined and Not Defined :-

    Undefined: Memory has been allocated but not assigned any value. Javascript has assigned undefined.
    Not Defined: Neither Memory has allocated nor value has assigned.
